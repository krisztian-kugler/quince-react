{"version":3,"sources":["logo.svg","Person/Person.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","person","props","employee","react_default","a","createElement","className","id","name","job","age","nick","onClick","toggleEmployee","delete","modal","buttonClass","submitDisabled","type","placeholder","onChange","changed","check","submit","close","App","state","timeout","updated","displayModal","dataDump","modalInputs","persons","order","initialized","arrow","String","fromCharCode","toggleEmployeeHandler","i","Object","toConsumableArray","_this","setState","dataDumpHandler","deletePersonHandler","splice","toggleModalHandler","value","inputChangeHandler","event","objectSpread","target","length","toggleModalEmployeeHandler","submitPerson","newPerson","push","sortByName","data","forEach","concat","clearTimeout","setTimeout","sort","bubbleSort","reverse","arr","prop","Error","counter","isSwapNecessary","_ref","b","str1","toLowerCase","str2","Math","min","_this2","this","axios","get","then","res","_this3","Modal_Modal","src","logo","alt","map","Person_Person","bind","key","random","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7418d6da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Person.css';\r\n\r\nconst person = (props) => {\r\n  let employee = null;\r\n\r\n  if (props.employee) {\r\n    employee = (<div className=\"check\"></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"person\" id={props.id}>\r\n      <div className=\"cell name-job\">\r\n        <div className=\"name\">{props.name}</div>\r\n        <div className=\"job\">{props.job}</div>\r\n      </div>\r\n      <div className=\"cell age\">{props.age}</div>\r\n      <div className=\"cell nickname\">{props.nick}</div>\r\n      <div className=\"cell employee\">\r\n        <div className=\"checkbox\" onClick={props.toggleEmployee}>\r\n          {employee}\r\n        </div>\r\n      </div>\r\n      <div className=\"cell delete\" onClick={props.delete}>Delete</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default person;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst modal = (props) => {\r\n\r\n  let employee = null;\r\n  let buttonClass = \"btn ok\";\r\n\r\n  if (props.submitDisabled) {\r\n    buttonClass += \" disabled\";\r\n  }\r\n\r\n  if (props.employee) {\r\n    employee = (<div className=\"check\"></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"input name\">\r\n          <label>Name</label>\r\n          <input type=\"text\" name=\"name\" placeholder=\"Name (At least 3 characters)\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input job-title\">\r\n          <label>Job title</label>\r\n          <input type=\"text\" name=\"job\" placeholder=\"Job\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input age\">\r\n          <label>Age</label>\r\n          <input type=\"text\" name=\"age\" placeholder=\"Age\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input nickname\">\r\n          <label>Nickname</label>\r\n          <input type=\"text\" name=\"nick\" placeholder=\"Nickname\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input employee\">\r\n          <label>Employee</label>\r\n          <div className=\"checkbox\" onClick={props.check}>\r\n            {employee}\r\n          </div>\r\n        </div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"button-bar\">\r\n          <button className={buttonClass} onClick={props.submit}>OK</button>\r\n          <button className=\"btn cancel\" onClick={props.close}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person';\nimport Modal from './Modal/Modal';\n\nclass App extends Component {\n\n  componentDidMount() {\n    axios.get(\"persons.json\")\n      .then(res => {\n        this.setState({persons: res.data}, () => {\n          this.sortByName();\n          this.setState({initialized: true});\n        });\n      });\n  }\n\n  state = {\n    timeout: null,\n    updated: null,\n    displayModal: false,\n    dataDump: \"\",\n    modalInputs: {\n      name: \"\",\n      job: \"\",\n      age: \"\",\n      nick: \"\",\n      employee: false\n    },\n    persons: [],\n    order: \"ascending\",\n    initialized: false,\n    submitDisabled: true,\n    arrow: String.fromCharCode(8593)\n  }\n\n  toggleEmployeeHandler = (i) => {\n    const persons = [...this.state.persons];\n    persons[i].employee = !persons[i].employee;\n    this.setState({persons: persons}, () => {\n      this.dataDumpHandler();\n    });\n  }\n\n  deletePersonHandler = (i) => {\n    const persons = [...this.state.persons];\n    persons.splice(i, 1);\n    this.setState({persons: persons}, () => {\n      this.dataDumpHandler();\n    });\n  }\n\n  toggleModalHandler = () => {\n    const value = this.state.displayModal;\n    this.setState({\n      displayModal: !value,\n      submitDisabled: true\n    });\n  }\n\n  inputChangeHandler = (event) => {\n    const modalInputs = {...this.state.modalInputs};\n    modalInputs[event.target.name] = event.target.value;\n    this.setState({modalInputs: modalInputs}, () => {\n      if (this.state.modalInputs.name.length >= 3) {\n        this.setState({submitDisabled: false});\n      } else {\n        this.setState({submitDisabled: true});\n      }\n    });\n  }\n\n  toggleModalEmployeeHandler = () => {\n    const modalInputs = {...this.state.modalInputs};\n    modalInputs.employee = !modalInputs.employee;\n    this.setState({modalInputs: modalInputs});\n  }\n\n  submitPerson = () => {\n    if (this.state.submitDisabled) {\n      return;\n    }\n    const newPerson = {...this.state.modalInputs};\n    const persons = [...this.state.persons];\n    persons.push(newPerson);\n    this.setState({\n      modalInputs: {name: \"\", job: \"\", age: \"\", nick: \"\", employee: false},\n      persons: persons,\n      submitDisabled: true\n    }, () => {\n      this.toggleModalHandler();\n      this.sortByName();\n    });\n  }\n\n  dataDumpHandler = () => {\n    let data = \"\";\n    this.state.persons.forEach((person, i) => {\n      data += `{\\n  \"name\": \"${person.name}\",\\n  \"job\": \"${person.job}\",\\n  \"age\": \"${person.age}\",\\n  \"nick\": \"${person.nick}\",\\n  \"employee\": ${person.employee}\\n}${i === this.state.persons.length - 1 ? \"\" : \",\"}\\n`\n    })\n    this.setState({dataDump: data});\n    this.updated();\n  }\n\n  updated = () => {\n    this.setState({updated: \"updated\"});\n    if (this.state.timeout) {\n      clearTimeout(this.state.timeout);\n      this.setState({timeout: null});\n    }\n    this.setState({\n      timeout: setTimeout(() => {\n        this.setState({updated: null});\n      }, 100)\n    })\n  }\n\n  sort = () => {\n    if (this.state.order === \"ascending\") {\n      this.setState({order: \"descending\"}, () => {\n        this.sortByName();\n        this.setState({arrow: String.fromCharCode(8595)});\n      });\n    } else {\n      this.setState({order: \"ascending\"}, () => {\n        this.sortByName();\n        this.setState({arrow: String.fromCharCode(8593)});\n      });\n    }\n  }\n\n  // Sort persons by name\n  sortByName = () => {\n    let persons;\n    if (this.state.order === \"ascending\") {\n      persons = this.bubbleSort(this.state.persons, \"name\");\n    } else if (this.state.order === \"descending\") {\n      persons = this.bubbleSort(this.state.persons, \"name\").reverse();\n    }\n    this.setState({persons: persons});\n    if (this.state.initialized) {\n      this.dataDumpHandler();\n    }\n  }\n\n  // Alphabetical bubble sort (not quite suitable for large arrays)\n  bubbleSort = (arr, prop) => {\n    if (arr.length < 2) {\n      throw new Error(\"Array is too short for sorting!\");\n    }\n    let counter = arr.length - 2;\n    while (counter >= 0) {\n      for (let i = 0; i <= counter; i++) {\n        if (this.isSwapNecessary(arr[i][prop], arr[i + 1][prop])) {\n          [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];\n        }\n      }\n      counter--;\n    }\n    return arr;\n  }\n\n  // Helper function for bubble sort to determine whether a swap is necessary (checks alphabetical order)\n  isSwapNecessary = (a, b) => {\n    const str1 = a.toLowerCase();\n    const str2 = b.toLowerCase();\n    const length = Math.min(str1.length, str2.length);\n    for (let i = 0; i < length; i++) {\n      if (str1[i] < str2[i]) {\n        return false;\n      } else if (str1[i] === str2[i]) {\n        if (i === length - 1 && str1.length > str2.length) {\n          return true;\n        }\n        continue;\n      } else {\n        return true;\n      }\n    }\n  }\n\n  render() {\n    let modal = null;\n    if (this.state.displayModal) {\n      modal = (\n        <Modal\n          employee={this.state.modalInputs.employee}\n          check={this.toggleModalEmployeeHandler}\n          changed={(event) => this.inputChangeHandler(event)}\n          close={this.toggleModalHandler}\n          submit={this.submitPerson}\n          submitDisabled={this.state.submitDisabled} />\n      )\n    }\n\n    return (\n      <div>\n        <header>\n          <img src={logo} className=\"logo\" alt=\"logo\" />\n          <span>React</span>\n        </header>\n\n        <main>\n          <div className=\"wrapper\">\n            <button className=\"btn-add\" onClick={this.toggleModalHandler}>Add</button>\n            <div className=\"list-header\">\n              <div className=\"cell name-job\" onClick={this.sort}>Name / Job\n                <div className=\"arrow\">{this.state.arrow}</div>\n              </div>\n              <div className=\"cell age\">Age</div>\n              <div className=\"cell nickname\">Nickname</div>\n              <div className=\"cell employee\">Employee</div>\n              <div className=\"cell delete\"></div>\n            </div>\n            <div className=\"persons-list\">\n              {this.state.persons.map((person, i) => {\n                return <Person\n                  id={i}\n                  name={person.name}\n                  job={person.job}\n                  age={person.age}\n                  nick={person.nick}\n                  employee={person.employee}\n                  toggleEmployee={this.toggleEmployeeHandler.bind(this, i, person)}\n                  delete={this.deletePersonHandler.bind(this, i, person)}\n                  key={Math.random().toFixed(4) + person.name} />\n              })}\n            </div>\n            <p className=\"data-dump\">Data dump:</p>\n            <textarea className={this.state.updated} value={this.state.dataDump} onChange={() => { return }}></textarea>\n          </div>\n          {modal}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}