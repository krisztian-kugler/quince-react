{"version":3,"sources":["logo.svg","Person/Person.js","Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","person","props","employee","react_default","a","createElement","className","id","name","job","age","nick","onClick","toggleEmployee","delete","modal","type","onChange","changed","check","submit","close","App","state","timeout","updated","displayModal","dataDump","modalInputs","persons","toggleEmployeeHandler","i","Object","toConsumableArray","_this","setState","dataDumpHandler","deletePersonHandler","splice","toggleModalHandler","value","inputChangeHandler","event","updatedModalInputs","objectSpread","target","toggleModalEmployeeHandler","submitPerson","newPerson","updatedPersons","push","concat","clearTimeout","setTimeout","_this2","this","axios","get","then","response","data","_this3","Modal_Modal","src","logo","alt","map","Person_Person","bind","key","Math","random","toFixed","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sUC4BzBC,eAzBA,SAACC,GACd,IAAIC,EAAW,KAMf,OAJID,EAAMC,WACRA,EAAYC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAI3BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASC,GAAIN,EAAMM,IAChCJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQL,EAAMO,MAC7BL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOL,EAAMQ,MAE9BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYL,EAAMS,KACjCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBL,EAAMU,MACtCR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWM,QAASX,EAAMY,gBACtCX,IAGLC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcM,QAASX,EAAMa,QAA5C,aCuBSC,SA3CD,SAACd,GAEb,IAAIC,EAAW,KAMf,OAJID,EAAMC,WACRA,EAAYC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAI3BH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOR,KAAK,OAAOS,SAAUhB,EAAMiB,WAEjDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOR,KAAK,MAAMS,SAAUhB,EAAMiB,WAEhDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOR,KAAK,MAAMS,SAAUhB,EAAMiB,WAEhDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,SAAOW,KAAK,OAAOR,KAAK,OAAOS,SAAUhB,EAAMiB,WAEjDf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWM,QAASX,EAAMkB,OACtCjB,IAGLC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAASM,QAASX,EAAMmB,QAA1C,MACAjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAaM,QAASX,EAAMoB,OAA9C,eC4GKC,6MAnIbC,MAAQ,CACNC,QAAS,KACTC,QAAS,KACTC,cAAc,EACdC,SAAU,GACVC,YAAa,CACXpB,KAAM,GACNC,IAAK,GACLC,IAAK,GACLC,KAAM,GACNT,UAAU,GAEZ2B,QAAS,MAGXC,sBAAwB,SAACC,EAAG/B,GAC1B,IAAM6B,EAAOG,OAAAC,EAAA,EAAAD,CAAOE,EAAKX,MAAMM,SAC/BA,EAAQE,GAAG7B,UAAY2B,EAAQE,GAAG7B,SAClCgC,EAAKC,SAAS,CAAEN,QAASA,IACzBK,EAAKE,gBAAgBpC,MAGvBqC,oBAAsB,SAACN,EAAG/B,GACxB,IAAM6B,EAAOG,OAAAC,EAAA,EAAAD,CAAOE,EAAKX,MAAMM,SAC/BA,EAAQS,OAAOP,EAAG,GAClBG,EAAKC,SAAS,CAAEN,QAASA,IACzBK,EAAKE,gBAAgBpC,MAGvBuC,mBAAqB,WACnB,IAAMC,EAAQN,EAAKX,MAAMG,aACzBQ,EAAKC,SAAS,CAAET,cAAec,OAGjCC,mBAAqB,SAACC,GACpB,IAAMC,EAAkBX,OAAAY,EAAA,EAAAZ,CAAA,GAAQE,EAAKX,MAAMK,aAC3Ce,EAAmBD,EAAMG,OAAOrC,MAAQkC,EAAMG,OAAOL,MACrDN,EAAKC,SAAS,CAAEP,YAAae,OAG/BG,2BAA6B,WAC3B,IAAMH,EAAkBX,OAAAY,EAAA,EAAAZ,CAAA,GAAQE,EAAKX,MAAMK,aAC3Ce,EAAmBzC,UAAYyC,EAAmBzC,SAClDgC,EAAKC,SAAS,CAAEP,YAAae,OAG/BI,aAAe,WACb,IAAMC,EAAShB,OAAAY,EAAA,EAAAZ,CAAA,GAAQE,EAAKX,MAAMK,aAC5BqB,EAAcjB,OAAAC,EAAA,EAAAD,CAAOE,EAAKX,MAAMM,SACtCoB,EAAeC,KAAKF,GACpBd,EAAKK,qBACLL,EAAKE,gBAAgBY,GACrBd,EAAKC,SAAS,CACZP,YAAa,CAAEpB,KAAM,GAAIC,IAAK,GAAIC,IAAK,GAAIC,KAAM,GAAIT,UAAU,GAC/D2B,QAASoB,OAIbb,gBAAkB,SAACpC,GACjB,IAAMwC,EAAK,UAAAW,OAAanD,EAAOQ,KAApB,WAAA2C,OAAkCnD,EAAOS,IAAzC,WAAA0C,OAAsDnD,EAAOU,IAA7D,YAAAyC,OAA2EnD,EAAOW,KAAlF,gBAAAwC,OAAqGnD,EAAOE,SAA5G,KACXgC,EAAKC,SAAS,CAAER,SAAUa,IAC1BN,EAAKT,aAGPA,QAAU,WACRS,EAAKC,SAAS,CAAEV,QAAS,YACrBS,EAAKX,MAAMC,UACb4B,aAAalB,EAAKX,MAAMC,SACxBU,EAAKC,SAAS,CAAEX,QAAS,QAE3BU,EAAKC,SAAS,CACZX,QAAS6B,WAAW,WAClBnB,EAAKC,SAAS,CAAEV,QAAS,QACxB,2FAhFa,IAAA6B,EAAAC,KAClBC,IAAMC,IAAI,gBACPC,KAAK,SAAAC,GACJL,EAAKnB,SAAS,CAAEN,QAAS8B,EAASC,0CAiF/B,IAAAC,EAAAN,KACHxC,EAAQ,KAYZ,OAXIwC,KAAKhC,MAAMG,eACbX,EACEZ,EAAAC,EAAAC,cAACyD,EAAD,CACE5D,SAAUqD,KAAKhC,MAAMK,YAAY1B,SACjCiB,MAAOoC,KAAKT,2BACZ5B,QAAS,SAACwB,GAAD,OAAWmB,EAAKpB,mBAAmBC,IAC5CrB,MAAOkC,KAAKhB,mBACZnB,OAAQmC,KAAKR,gBAKjB5C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAK0D,IAAKC,IAAM1D,UAAU,OAAO2D,IAAI,SACrC9D,EAAAC,EAAAC,cAAA,sBAGFF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUM,QAAS2C,KAAKhB,oBAA1C,OACApC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,cACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAf,OACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZiD,KAAKhC,MAAMM,QAAQqC,IAAI,SAAClE,EAAQ+B,GAC/B,OAAO5B,EAAAC,EAAAC,cAAC8D,EAAD,CACL5D,GAAIwB,EACJvB,KAAMR,EAAOQ,KACbC,IAAKT,EAAOS,IACZC,IAAKV,EAAOU,IACZC,KAAMX,EAAOW,KACbT,SAAUF,EAAOE,SACjBW,eAAgBgD,EAAK/B,sBAAsBsC,KAAKP,EAAM9B,EAAG/B,GACzDc,OAAQ+C,EAAKxB,oBAAoB+B,KAAKP,EAAM9B,EAAG/B,GAC/CqE,IAAKC,KAAKC,SAASC,QAAQ,GAAKxE,EAAOQ,UAG7CL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,cACAH,EAAAC,EAAAC,cAAA,YAAUC,UAAWiD,KAAKhC,MAAME,QAASe,MAAOe,KAAKhC,MAAMI,SAAUV,SAAU,gBAEhFF,WArIO0D,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7E,EAAAC,EAAAC,cAAC4E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.e2b8c9ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Person.css';\r\n\r\nconst person = (props) => {\r\n  let employee = null;\r\n\r\n  if (props.employee) {\r\n    employee = (<div className=\"check\"></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"person\" id={props.id}>\r\n      <div className=\"cell name-job\">\r\n        <div className=\"name\">{props.name}</div>\r\n        <div className=\"job\">{props.job}</div>\r\n      </div>\r\n      <div className=\"cell age\">{props.age}</div>\r\n      <div className=\"cell nickname\">{props.nick}</div>\r\n      <div className=\"cell employee\">\r\n        <div className=\"checkbox\" onClick={props.toggleEmployee}>\r\n          {employee}\r\n        </div>\r\n      </div>\r\n      <div className=\"cell delete\" onClick={props.delete}>Delete</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default person;","import React from 'react';\r\nimport './Modal.css';\r\n\r\nconst modal = (props) => {\r\n\r\n  let employee = null;\r\n\r\n  if (props.employee) {\r\n    employee = (<div className=\"check\"></div>)\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal\">\r\n      <div className=\"wrapper\">\r\n        <div className=\"input name\">\r\n          <label>Name</label>\r\n          <input type=\"text\" name=\"name\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input job-title\">\r\n          <label>Job title</label>\r\n          <input type=\"text\" name=\"job\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input age\">\r\n          <label>Age</label>\r\n          <input type=\"text\" name=\"age\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input nickname\">\r\n          <label>Nickname</label>\r\n          <input type=\"text\" name=\"nick\" onChange={props.changed} />\r\n        </div>\r\n        <div className=\"input employee\">\r\n          <label>Employee</label>\r\n          <div className=\"checkbox\" onClick={props.check}>\r\n            {employee}\r\n          </div>\r\n        </div>\r\n        <div className=\"divider\"></div>\r\n        <div className=\"button-bar\">\r\n          <button className=\"btn ok\" onClick={props.submit}>OK</button>\r\n          <button className=\"btn cancel\" onClick={props.close}>Cancel</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default modal;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.css';\nimport Person from './Person/Person';\nimport Modal from './Modal/Modal';\n\nclass App extends Component {\n\n  componentDidMount() {\n    axios.get(\"persons.json\")\n      .then(response => {\n        this.setState({ persons: response.data })\n      });\n  }\n\n  state = {\n    timeout: null,\n    updated: null,\n    displayModal: false,\n    dataDump: \"\",\n    modalInputs: {\n      name: \"\",\n      job: \"\",\n      age: \"\",\n      nick: \"\",\n      employee: false\n    },\n    persons: []\n  }\n\n  toggleEmployeeHandler = (i, person) => {\n    const persons = [...this.state.persons];\n    persons[i].employee = !persons[i].employee;\n    this.setState({ persons: persons });\n    this.dataDumpHandler(person);\n  }\n\n  deletePersonHandler = (i, person) => {\n    const persons = [...this.state.persons];\n    persons.splice(i, 1);\n    this.setState({ persons: persons });\n    this.dataDumpHandler(person);\n  }\n\n  toggleModalHandler = () => {\n    const value = this.state.displayModal;\n    this.setState({ displayModal: !value });\n  }\n\n  inputChangeHandler = (event) => {\n    const updatedModalInputs = { ...this.state.modalInputs };\n    updatedModalInputs[event.target.name] = event.target.value;\n    this.setState({ modalInputs: updatedModalInputs });\n  }\n\n  toggleModalEmployeeHandler = () => {\n    const updatedModalInputs = { ...this.state.modalInputs };\n    updatedModalInputs.employee = !updatedModalInputs.employee;\n    this.setState({ modalInputs: updatedModalInputs });\n  }\n\n  submitPerson = () => {\n    const newPerson = { ...this.state.modalInputs };\n    const updatedPersons = [...this.state.persons];\n    updatedPersons.push(newPerson);\n    this.toggleModalHandler();\n    this.dataDumpHandler(newPerson);\n    this.setState({\n      modalInputs: { name: \"\", job: \"\", age: \"\", nick: \"\", employee: false },\n      persons: updatedPersons\n    })\n  }\n\n  dataDumpHandler = (person) => {\n    const value = `{name: ${person.name}, job: ${person.job}, age: ${person.age}, nick: ${person.nick}, employee: ${person.employee}}`;\n    this.setState({ dataDump: value });\n    this.updated();\n  }\n\n  updated = () => {\n    this.setState({ updated: \"updated\" });\n    if (this.state.timeout) {\n      clearTimeout(this.state.timeout);\n      this.setState({ timeout: null });\n    }\n    this.setState({\n      timeout: setTimeout(() => {\n        this.setState({ updated: null });\n      }, 100)\n    })\n  }\n\n  render() {\n    let modal = null;\n    if (this.state.displayModal) {\n      modal = (\n        <Modal\n          employee={this.state.modalInputs.employee}\n          check={this.toggleModalEmployeeHandler}\n          changed={(event) => this.inputChangeHandler(event)}\n          close={this.toggleModalHandler}\n          submit={this.submitPerson} />\n      )\n    }\n\n    return (\n      <div>\n        <header>\n          <img src={logo} className=\"logo\" alt=\"logo\" />\n          <span>React</span>\n        </header>\n\n        <main>\n          <div className=\"wrapper\">\n            <button className=\"btn-add\" onClick={this.toggleModalHandler}>Add</button>\n            <div className=\"list-header\">\n              <div className=\"cell name-job\">Name / Job</div>\n              <div className=\"cell age\">Age</div>\n              <div className=\"cell nickname\">Nickname</div>\n              <div className=\"cell employee\">Employee</div>\n              <div className=\"cell delete\"></div>\n            </div>\n            <div className=\"persons-list\">\n              {this.state.persons.map((person, i) => {\n                return <Person\n                  id={i}\n                  name={person.name}\n                  job={person.job}\n                  age={person.age}\n                  nick={person.nick}\n                  employee={person.employee}\n                  toggleEmployee={this.toggleEmployeeHandler.bind(this, i, person)}\n                  delete={this.deletePersonHandler.bind(this, i, person)}\n                  key={Math.random().toFixed(4) + person.name} />\n              })}\n            </div>\n            <p className=\"data-dump\">Data dump:</p>\n            <textarea className={this.state.updated} value={this.state.dataDump} onChange={() => { return }}></textarea>\n          </div>\n          {modal}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}